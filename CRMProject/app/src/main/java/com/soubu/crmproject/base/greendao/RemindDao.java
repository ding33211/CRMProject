package com.soubu.crmproject.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "Remind".
*/
public class RemindDao extends AbstractDao<Remind, Long> {

    public static final String TABLENAME = "Remind";

    /**
     * Properties of entity Remind.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property Remind_state = new Property(2, Integer.class, "remind_state", false, "REMIND_STATE");
        public final static Property Complete_state = new Property(3, Integer.class, "complete_state", false, "COMPLETE_STATE");
        public final static Property Content = new Property(4, String.class, "content", false, "CONTENT");
        public final static Property Address = new Property(5, String.class, "address", false, "ADDRESS");
        public final static Property Phone = new Property(6, String.class, "phone", false, "PHONE");
    };


    public RemindDao(DaoConfig config) {
        super(config);
    }
    
    public RemindDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"Remind\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DATE\" INTEGER," + // 1: date
                "\"REMIND_STATE\" INTEGER," + // 2: remind_state
                "\"COMPLETE_STATE\" INTEGER," + // 3: complete_state
                "\"CONTENT\" TEXT," + // 4: content
                "\"ADDRESS\" TEXT," + // 5: address
                "\"PHONE\" TEXT);"); // 6: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"Remind\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Remind entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Integer remind_state = entity.getRemind_state();
        if (remind_state != null) {
            stmt.bindLong(3, remind_state);
        }
 
        Integer complete_state = entity.getComplete_state();
        if (complete_state != null) {
            stmt.bindLong(4, complete_state);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Remind entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
 
        Integer remind_state = entity.getRemind_state();
        if (remind_state != null) {
            stmt.bindLong(3, remind_state);
        }
 
        Integer complete_state = entity.getComplete_state();
        if (complete_state != null) {
            stmt.bindLong(4, complete_state);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(5, content);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(6, address);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(7, phone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Remind readEntity(Cursor cursor, int offset) {
        Remind entity = new Remind( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // remind_state
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // complete_state
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // content
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // address
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // phone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Remind entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setRemind_state(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setComplete_state(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Remind entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Remind entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
