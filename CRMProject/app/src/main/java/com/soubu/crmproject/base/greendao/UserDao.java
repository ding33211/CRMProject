package com.soubu.crmproject.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "User".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "User";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property Loginname = new Property(2, String.class, "loginname", false, "LOGINNAME");
        public final static Property Mobile = new Property(3, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(4, String.class, "email", false, "EMAIL");
        public final static Property Token = new Property(5, String.class, "token", false, "TOKEN");
        public final static Property Pwd = new Property(6, String.class, "pwd", false, "PWD");
        public final static Property CreatedAt = new Property(7, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(8, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property User_id = new Property(9, String.class, "user_id", false, "USER_ID");
        public final static Property CompanyId = new Property(10, String.class, "companyId", false, "COMPANY_ID");
        public final static Property CompanyName = new Property(11, String.class, "companyName", false, "COMPANY_NAME");
        public final static Property RoleId = new Property(12, String.class, "roleId", false, "ROLE_ID");
        public final static Property RoleName = new Property(13, String.class, "roleName", false, "ROLE_NAME");
        public final static Property Type = new Property(14, String.class, "type", false, "TYPE");
        public final static Property Area = new Property(15, String.class, "area", false, "AREA");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"User\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"LOGINNAME\" TEXT," + // 2: loginname
                "\"MOBILE\" TEXT," + // 3: mobile
                "\"EMAIL\" TEXT," + // 4: email
                "\"TOKEN\" TEXT," + // 5: token
                "\"PWD\" TEXT," + // 6: pwd
                "\"CREATED_AT\" INTEGER," + // 7: createdAt
                "\"UPDATED_AT\" INTEGER," + // 8: updatedAt
                "\"USER_ID\" TEXT," + // 9: user_id
                "\"COMPANY_ID\" TEXT," + // 10: companyId
                "\"COMPANY_NAME\" TEXT," + // 11: companyName
                "\"ROLE_ID\" TEXT," + // 12: roleId
                "\"ROLE_NAME\" TEXT," + // 13: roleName
                "\"TYPE\" TEXT," + // 14: type
                "\"AREA\" TEXT);"); // 15: area
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"User\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String loginname = entity.getLoginname();
        if (loginname != null) {
            stmt.bindString(3, loginname);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(7, pwd);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(8, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(9, updatedAt.getTime());
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(10, user_id);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(11, companyId);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(12, companyName);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(13, roleId);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(14, roleName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(15, type);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(16, area);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String loginname = entity.getLoginname();
        if (loginname != null) {
            stmt.bindString(3, loginname);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(4, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(5, email);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(6, token);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(7, pwd);
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(8, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(9, updatedAt.getTime());
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(10, user_id);
        }
 
        String companyId = entity.getCompanyId();
        if (companyId != null) {
            stmt.bindString(11, companyId);
        }
 
        String companyName = entity.getCompanyName();
        if (companyName != null) {
            stmt.bindString(12, companyName);
        }
 
        String roleId = entity.getRoleId();
        if (roleId != null) {
            stmt.bindString(13, roleId);
        }
 
        String roleName = entity.getRoleName();
        if (roleName != null) {
            stmt.bindString(14, roleName);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(15, type);
        }
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(16, area);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // loginname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // mobile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // token
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // pwd
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)), // createdAt
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)), // updatedAt
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // user_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // companyId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // companyName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // roleId
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // roleName
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // type
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // area
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLoginname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMobile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setToken(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPwd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreatedAt(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
        entity.setUpdatedAt(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
        entity.setUser_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCompanyId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setCompanyName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setRoleId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRoleName(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setType(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setArea(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
