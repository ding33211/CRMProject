package com.soubu.crmproject.base.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "User".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "User";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Nickname = new Property(1, String.class, "nickname", false, "NICKNAME");
        public final static Property Username = new Property(2, String.class, "username", false, "USERNAME");
        public final static Property Loginname = new Property(3, String.class, "loginname", false, "LOGINNAME");
        public final static Property Department = new Property(4, String.class, "department", false, "DEPARTMENT");
        public final static Property Position = new Property(5, String.class, "position", false, "POSITION");
        public final static Property Mobile = new Property(6, String.class, "mobile", false, "MOBILE");
        public final static Property Email = new Property(7, String.class, "email", false, "EMAIL");
        public final static Property Token = new Property(8, String.class, "token", false, "TOKEN");
        public final static Property EmployeeNumber = new Property(9, String.class, "employeeNumber", false, "EMPLOYEE_NUMBER");
        public final static Property OfficeAddress = new Property(10, String.class, "officeAddress", false, "OFFICE_ADDRESS");
        public final static Property Note = new Property(11, String.class, "note", false, "NOTE");
        public final static Property Pwd = new Property(12, String.class, "pwd", false, "PWD");
        public final static Property Activated = new Property(13, Boolean.class, "activated", false, "ACTIVATED");
        public final static Property ActivatedAt = new Property(14, java.util.Date.class, "activatedAt", false, "ACTIVATED_AT");
        public final static Property CreatedAt = new Property(15, java.util.Date.class, "createdAt", false, "CREATED_AT");
        public final static Property UpdatedAt = new Property(16, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
        public final static Property User_id = new Property(17, String.class, "user_id", false, "USER_ID");
    };


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"User\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NICKNAME\" TEXT," + // 1: nickname
                "\"USERNAME\" TEXT," + // 2: username
                "\"LOGINNAME\" TEXT," + // 3: loginname
                "\"DEPARTMENT\" TEXT," + // 4: department
                "\"POSITION\" TEXT," + // 5: position
                "\"MOBILE\" TEXT," + // 6: mobile
                "\"EMAIL\" TEXT," + // 7: email
                "\"TOKEN\" TEXT," + // 8: token
                "\"EMPLOYEE_NUMBER\" TEXT," + // 9: employeeNumber
                "\"OFFICE_ADDRESS\" TEXT," + // 10: officeAddress
                "\"NOTE\" TEXT," + // 11: note
                "\"PWD\" TEXT," + // 12: pwd
                "\"ACTIVATED\" INTEGER," + // 13: activated
                "\"ACTIVATED_AT\" INTEGER," + // 14: activatedAt
                "\"CREATED_AT\" INTEGER," + // 15: createdAt
                "\"UPDATED_AT\" INTEGER," + // 16: updatedAt
                "\"USER_ID\" TEXT);"); // 17: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"User\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String loginname = entity.getLoginname();
        if (loginname != null) {
            stmt.bindString(4, loginname);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(5, department);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(6, position);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(9, token);
        }
 
        String employeeNumber = entity.getEmployeeNumber();
        if (employeeNumber != null) {
            stmt.bindString(10, employeeNumber);
        }
 
        String officeAddress = entity.getOfficeAddress();
        if (officeAddress != null) {
            stmt.bindString(11, officeAddress);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(12, note);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(13, pwd);
        }
 
        Boolean activated = entity.getActivated();
        if (activated != null) {
            stmt.bindLong(14, activated ? 1L: 0L);
        }
 
        java.util.Date activatedAt = entity.getActivatedAt();
        if (activatedAt != null) {
            stmt.bindLong(15, activatedAt.getTime());
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(16, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(17, updatedAt.getTime());
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(18, user_id);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(2, nickname);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(3, username);
        }
 
        String loginname = entity.getLoginname();
        if (loginname != null) {
            stmt.bindString(4, loginname);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(5, department);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(6, position);
        }
 
        String mobile = entity.getMobile();
        if (mobile != null) {
            stmt.bindString(7, mobile);
        }
 
        String email = entity.getEmail();
        if (email != null) {
            stmt.bindString(8, email);
        }
 
        String token = entity.getToken();
        if (token != null) {
            stmt.bindString(9, token);
        }
 
        String employeeNumber = entity.getEmployeeNumber();
        if (employeeNumber != null) {
            stmt.bindString(10, employeeNumber);
        }
 
        String officeAddress = entity.getOfficeAddress();
        if (officeAddress != null) {
            stmt.bindString(11, officeAddress);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(12, note);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(13, pwd);
        }
 
        Boolean activated = entity.getActivated();
        if (activated != null) {
            stmt.bindLong(14, activated ? 1L: 0L);
        }
 
        java.util.Date activatedAt = entity.getActivatedAt();
        if (activatedAt != null) {
            stmt.bindLong(15, activatedAt.getTime());
        }
 
        java.util.Date createdAt = entity.getCreatedAt();
        if (createdAt != null) {
            stmt.bindLong(16, createdAt.getTime());
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(17, updatedAt.getTime());
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(18, user_id);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // username
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // loginname
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // department
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // position
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // mobile
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // email
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // token
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // employeeNumber
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // officeAddress
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // note
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // pwd
            cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0, // activated
            cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)), // activatedAt
            cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)), // createdAt
            cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // updatedAt
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUsername(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLoginname(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDepartment(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMobile(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmail(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setToken(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setEmployeeNumber(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOfficeAddress(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNote(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPwd(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setActivated(cursor.isNull(offset + 13) ? null : cursor.getShort(offset + 13) != 0);
        entity.setActivatedAt(cursor.isNull(offset + 14) ? null : new java.util.Date(cursor.getLong(offset + 14)));
        entity.setCreatedAt(cursor.isNull(offset + 15) ? null : new java.util.Date(cursor.getLong(offset + 15)));
        entity.setUpdatedAt(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setUser_id(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
